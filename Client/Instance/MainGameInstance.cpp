// Fill out your copyright notice in the Description page of Project Settings.

#include "MainGameInstance.h"

// DANGER, DANGER, DANGER
#include "../Character/HeroCharacterBase.h"

void UMainGameInstance::Init()
{
	Super::Init();

	TickStepDelegateHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UMainGameInstance::UpdateStep));
	TickMessageDelegateHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UMainGameInstance::UpdateMessage));

	ISocketSubsystem* SocketSubsystem = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM);
	if (SocketSubsystem)
	{
		// Local Debug
		Server = SocketSubsystem->CreateSocket(NAME_Stream, "SensorConnect", true);

		bool isIPValid;

		// read port from file
		FILE* PortFile = fopen("P.DATA", "r");
		int Port = 3020;

		if (PortFile)
		{
			fscanf(PortFile, "%d", &Port);
			Port = std::min(Port, 4000);
			Port = std::max(Port, 3000);

			fclose(PortFile);
			PortFile = nullptr;
		}

		Print(FString::Printf(TEXT("Port: %d"), Port));

		auto ServerAddress = SocketSubsystem->CreateInternetAddr();
		// ServerAddress->SetIp(TEXT("127.0.0.1"), isIPValid);
		ServerAddress->SetIp(TEXT("10.0.128.199"), isIPValid);
		ServerAddress->SetPort(Port);

		if (Server) Server->SetNoDelay(); // There?

		if (Server && Server->Connect(*ServerAddress))
		{
			Print(TEXT("Server Connected"));

			Server->SetNoDelay(); // There?

			SendWorker = new NetworkSendThread(Server);
			SendThread = FRunnableThread::Create(SendWorker, TEXT("SendThread"));

			RecvWorker = new NetworkRecvThread(Server);
			RecvThread = FRunnableThread::Create(RecvWorker, TEXT("RecvThread"));

			Print(TEXT("Two Threads Started"));
		}
		else
		{
			Print(TEXT("Failed Connection"));
		}
	}

	InitConst();
}

void UMainGameInstance::Shutdown()
{
	Destroy();

	FTicker::GetCoreTicker().RemoveTicker(TickStepDelegateHandle);
	FTicker::GetCoreTicker().RemoveTicker(TickMessageDelegateHandle);

	Super::Shutdown();
}

bool UMainGameInstance::UpdateStep(float Delta)
{
	// For Test
	/*
	static float SumTime = 0.0f;
	SumTime += Delta;

	if (SumTime > 30.0f)
	{
		static bool Done = false;
		if (!Done)
		{
			LoginUserName = "Zhonghui";
			OnLoginRespond.ExecuteIfBound(1, 0);

			Print(TEXT("Simulate Login"));
			Done = true;
		}
	}
	if (SumTime > 50.0f)
	{
		static bool Done = false;
		if (!Done)
		{
			{
				auto Player = MatchFoundRespondResult.add_otherplayers();
				Player->set_heroid(3);
				Player->set_skinid(3);
				Player->set_playerid(1);
				Player->set_playername("Zhonghui");
			}

			{
				auto Player = MatchFoundRespondResult.add_otherplayers();
				Player->set_heroid(2);
				Player->set_skinid(2);
				Player->set_playerid(2);
				Player->set_playername("Lishun");
			}

			{
				auto Player = MatchFoundRespondResult.add_otherplayers();
				Player->set_heroid(4);
				Player->set_skinid(3);
				Player->set_playerid(3);
				Player->set_playername("QZK");
			}

			{
				auto Player = MatchFoundRespondResult.add_otherplayers();
				Player->set_heroid(1);
				Player->set_skinid(2);
				Player->set_playerid(4);
				Player->set_playername("LHY");
			}
			SelfID = 1;

			OnMatchFound.ExecuteIfBound();

			Print(TEXT("Simulate Match Found"));
			Done = true;
		}
	}

	*/
	// For Test

	// Online Check
	HeartCheckRemainTime -= Delta;
	if (HeartCheckRemainTime < 0.0f)
	{
		HeartCheckRemainTime = 4.0f;

		Send(MType::Heart, nullptr, 0);
	}

	if (GameRunning)
	{
		std::chrono::steady_clock::time_point Now = std::chrono::steady_clock::now();

		auto TimeDiff = Now - GameStartTime;
		auto Duration = std::chrono::duration_cast<std::chrono::microseconds>(TimeDiff);
		GameSumTime = Duration.count() / 1e3;

		auto NewStep = (int)(GameSumTime / FrameLong) + 1;

		while (NowFrame <= NewStep)
		{
			NowFrame += 1;
			// OnStepBegin.Broadcast(NowFrame); // Start from Frame 1

			for (int i = 0; i < AllCharacters.Num(); i += 1)
			{
				if (!IsValid(AllCharacters[i])) continue;

				AHeroCharacterBase* Hero = Cast<AHeroCharacterBase>(AllCharacters[i]);
				if (Hero)
				{
					Hero->OnStepStart(NowFrame);
				}
			}

			// Print(FString::Printf(TEXT("Step %d Start; Now: %.6lf"), NowFrame, Sum / 1e3));
		}
	}

	return true;
}

bool UMainGameInstance::UpdateMessage(float Delta)
{
	if (!RecvWorker) return true;

	// HARD CODE, Recv Message
	for (int i = 1; i <= 16; i += 1)
	{
		auto Next = RecvWorker->NextMessage();

		if (!Next.MessageType) break;

		RecvWorker->PopMessage();

		// Handle Messages
		switch (static_cast<MType>(Next.MessageType))
		{
		case MType::RegisterRespond:
		{
			PRegisterRespond RegisterRespond;
			RegisterRespond.ParseFromArray(Next.Buffer.GetData(), Next.MessageLen);

			if (RegisterRespond.success())
			{
				Print(TEXT("Register Successfully"));
			}
			else
			{
				Print(TEXT("Register Failed"));
			}
			OnSignupRespond.ExecuteIfBound(RegisterRespond.success(), RegisterRespond.errorcode());

		}break;

		case MType::LoginRespond:
		{
			PLoginRespond LoginRespond;
			LoginRespond.ParseFromArray(Next.Buffer.GetData(), Next.MessageLen);

			if (LoginRespond.success())
			{
				Print(TEXT("Login Successfully"));
			}
			else
			{
				Print(FString::Printf(TEXT("Login Failed : %d"), LoginRespond.errorcode()));
			}
			OnLoginRespond.ExecuteIfBound(LoginRespond.success(), LoginRespond.errorcode());

		}break;

		case MType::MatchFoundRespond:
		{
			PMatchFoundRespond MatchFoundRespond;
			MatchFoundRespond.ParseFromArray(Next.Buffer.GetData(), Next.MessageLen);

			// SelfID = MatchFoundRespond.playerid(); // Might not work
			MatchFoundRespondResult = MatchFoundRespond; // Save the Result

			for (int PlayerIndex = 0; PlayerIndex < MatchFoundRespond.otherplayers_size(); PlayerIndex += 1)
			{
				auto APlayer = MatchFoundRespond.otherplayers(PlayerIndex);
				if (APlayer.playername() == LoginUserName) // This is the Local Player
				{
					SelfID = APlayer.playerid(); // [1,4]
				}
			}

			MapSeed = MatchFoundRespond.randomseed();

			Print(FString::Printf(TEXT("Match Found, Room Size = %d"), MatchFoundRespond.otherplayers_size()));
			Print(FString::Printf(TEXT("Local ID = %d"), SelfID));

			OnMatchFound.ExecuteIfBound();
		}break;

		case MType::AllPlayerLoadedRespond:
		{
			Print(TEXT("All Player Ready"));

			// Game Begin
			auto PC = UGameplayStatics::GetPlayerController(GetWorld(), 0);
			if (PC && HeroCharacter)
			{
				PC->Possess(HeroCharacter);
			}

			GameStart();
		}break;

		/*
		case MType::PlayerMoveRespond:
		{
			PPlayerMoveRespond PlayerMoveRespond;
			PlayerMoveRespond.ParseFromArray(Next.Buffer.GetData(), Next.MessageLen);

			OnPlayerMove.Broadcast(PlayerMoveRespond.playerid(), PlayerMoveRespond.x(), PlayerMoveRespond.y());

			// Print(FString::Printf(TEXT("Player %d at (%.1f,%.1f)"), PlayerMoveRespond.playerid(), PlayerMoveRespond.x(), PlayerMoveRespond.y()));
		}break;

		case MType::PlayerTurnRespond:
		{
			PPlayerTurnRespond PlayerTurnRespond;
			PlayerTurnRespond.ParseFromArray(Next.Buffer.GetData(), Next.MessageLen);

			OnPlayerTurn.Broadcast(PlayerTurnRespond.playerid(), PlayerTurnRespond.x(), PlayerTurnRespond.y());

			// Print(FString::Printf(TEXT("Player %d at (%.1f,%.1f)"), PlayerTurnRespond.playerid(), PlayerTurnRespond.x(), PlayerTurnRespond.y()));
		}break;
		*/

		case MType::ServerStep:
		{
			if (!GameRunning)
			{
				break;
			}

			PServerStep ServerStep;
			bool Succ = ServerStep.ParseFromArray(Next.Buffer.GetData(), Next.MessageLen);

			if (Succ)
			{
				NetworkDelay = GameSumTime - LastStepSendTime;
				LastStepSendTime += FrameLong;

				// Print(TEXT("Decode Succ"));
				for (int ClientIndex = 0; ClientIndex < ServerStep.allclients_size(); ClientIndex += 1)
				{
					PServerStep_Client SomeClient = ServerStep.allclients(ClientIndex);

					if (SomeClient.playerid() == SelfID && SomeClient.isempty())
					{
						LostPackageNumber += 1;
					}

					OnHaveClientStep.Broadcast(SomeClient.playerid(), SomeClient.isempty(), FClientStep(SomeClient.step()));
				}
			}

			// else Print(TEXT("Decode Failed!"));
		}break;

		case MType::NextFrame:
		{

		}break;

		default:
		{
			Print(FString::Printf(TEXT("Find Error Message Type : %u"), Next.MessageType));
		}break;
		}
	}
	return true;
}

void UMainGameInstance::Destroy()
{
	if (Server)
	{
		Server->Close();
		Server = nullptr;

		Print(TEXT("Server Closed"));
	}

	if (SendWorker) SendWorker->Stop(), Print(TEXT("Closed Send Threads"));
	if (RecvWorker) RecvWorker->Stop(), Print(TEXT("Closed Recv Threads"));

	if (SendThread)
	{
		SendThread->Kill();
		delete SendThread;
		SendThread = nullptr;
		if (SendWorker)
		{
			delete SendWorker;
			SendWorker = nullptr;
		}
	}

	if (RecvThread)
	{
		RecvThread->Kill();
		delete RecvThread;
		RecvThread = nullptr;
		if (RecvWorker)
		{
			delete RecvWorker;
			RecvWorker = nullptr;
		}
	}
}

void UMainGameInstance::Send(MType SendType, uint8_t* Buffer, uint32_t DataLen)
{
	if (!SendWorker) return;

	if (DataLen >= 200) Print(TEXT("You are sending a too big message"));

	SingleMessageData SendData;
	SendData.MessageType = static_cast<uint8_t>(SendType);
	SendData.MessageLen = static_cast<uint8_t>(DataLen);
	SendData.Buffer.SetNum(SendData.MessageLen);
	if (SendData.MessageLen)
	{
		memcpy(SendData.Buffer.GetData(), Buffer, SendData.MessageLen);
	}

	SendWorker->AddMessage(SendData);
}

void UMainGameInstance::GameStart()
{
	GameStartTime = std::chrono::steady_clock::now();

	NowFrame = 0;
	LostPackageNumber = 0;

	LastPlayer = RoomSize;
	LastStepSendTime = 0.0;

	GameRunning = true;
}

void UMainGameInstance::GameStop()
{
	SelfID = 0; // Local ID, for room

	HeroCharacter = nullptr;
	AllCharacters.Reset();

	GameStartTime = std::chrono::steady_clock::now();

	NowFrame = 0;
	LostPackageNumber = 0;

	for (int i = 0; i < 128; i += 1)
	{
		for (int j = 0; j < 128; j += 1)
		{
			BlockVisiable[i][j] = true; // No Hidden
		}
	}

	GameRunning = false;
}

void UMainGameInstance::InitConst()
{
	// Game Map
	{
		int Map[61][61] =
		{
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,0,3,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,0,2,2,0,0,0,0,0,0,2,2,2,3,0,0,0,3,1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,0,3,2,2,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,1,1,2,1,1,1,2,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,1,1,1,3,0,0,0,3,0,0,0,0,0,2,2,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,3,2,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,1,3,0,3,2,2,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,3,0,0,2,2,0,0,0,3,0,0,1,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,1,3,0,0,0,0,3,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,1,3,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,3,3,0,0,0,0,0,0,3,1,2,2,0,0,0,0,0,2,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,1,1,3,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,1},
			{1,0,0,0,0,1,1,1,0,0,0,0,2,3,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,0,0,0,2,2,2,3,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,1,2,2,2,2,0,0,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,0,0,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,0,3,0,2,2,2,0,0,0,0,0,0,0,2,2,2,2,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,2,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,0,0,0,3,2,0,0,0,0,0,0,0,0,3,2,2,2,1,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,3,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,2,2,1,3,0,0,0,0,0,0,3,3,1,1,2,3,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,0,0,0,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,1,2,2,2,2,2,2,2,2,2,1,0,3,0,0,0,0,1,2,2,2,2,2,0,0,0,1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,1,1,1,2,2,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,2,2,2,2,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1},
			{1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,2,2,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,2,3,0,3,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
			{1,0,0,0,0,0,0,2,0,1,0,0,0,0,0,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,2,1,1,0,0,0,0,0,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,3,1,3,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,3,2,1,2,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,3,0,0,3,0,0,0,0,2,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,1,1,1,1,1,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,2,2,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,2,2,0,0,0,0,0,0,1,1,1,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,2,2,3,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,1,3,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
		};

		memcpy(GameMap[1], Map, sizeof(int) * 61 * 61);
		MapName[1] = "QinZikang";
	}

	{
		int Map[61][61] =
		{
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,2,2,2,2,2,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,3,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,3,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,2,2,2,1,2,2,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,2,2,1,2,2,2,0,0,0,1},
			{1,0,0,0,2,2,2,1,2,2,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,2,2,1,2,2,2,0,0,0,1},
			{1,0,0,0,2,2,2,2,2,2,2,1,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,3,2,3,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,3,0,1,2,2,2,2,2,2,2,0,0,0,1},
			{1,0,0,0,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,0,0,0,1},
			{1,0,0,0,2,2,2,2,2,2,2,1,0,3,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,3,2,3,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,3,0,1,2,2,2,2,2,2,2,0,0,0,1},
			{1,0,0,0,2,2,2,1,2,2,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,2,2,1,2,2,2,0,0,0,1},
			{1,0,0,0,2,2,2,1,2,2,2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,2,2,1,2,2,2,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,3,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,3,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,2,2,2,2,2,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
		};

		memcpy(GameMap[2], Map, sizeof(int) * 61 * 61);
		MapName[2] = "Circle!";
	}

	{
		int Map[61][61] =
		{
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,1,0,0,0,1,0,0,0,3,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,2,2,2,2,2,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,3,2,2,2,2,2,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,3,0,0,0,1,0,0,0,1,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1},
			{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
		};

		memcpy(GameMap[3], Map, sizeof(int) * 61 * 61);
		MapName[3] = "Flower";
	}

	// Player Init Location

	PlayerInitLocationAsBlockX[1] = -25;
	PlayerInitLocationAsBlockY[1] = -25;

	PlayerInitLocationAsBlockX[2] =  25;
	PlayerInitLocationAsBlockY[2] = -25;

	PlayerInitLocationAsBlockX[3] = -25;
	PlayerInitLocationAsBlockY[3] =  25;

	PlayerInitLocationAsBlockX[4] =  25;
	PlayerInitLocationAsBlockY[4] =  25;

	for (int i = 0; i < 128; i += 1)
	{
		for (int j = 0; j < 128; j += 1)
		{
			BlockVisiable[i][j] = true; // No Hidden
		}
	}

	// ==================================================

	SkillInfos.Emplace(1, FSkillInfo());
	SkillInfos[1].Name = TEXT("");
	SkillInfos[1].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Ice_07");
	SkillInfos[1].CooldownTime = 1.0f;
	SkillInfos[1].ManaCost = 50.0f;

	SkillInfos.Emplace(2, FSkillInfo());
	SkillInfos[2].Name = TEXT("");
	SkillInfos[2].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Ice_05");
	SkillInfos[2].CooldownTime = 3.0f;
	SkillInfos[2].ManaCost = 120.0f;

	SkillInfos.Emplace(3, FSkillInfo());
	SkillInfos[3].Name = TEXT("");
	SkillInfos[3].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Ice_04");
	SkillInfos[3].CooldownTime = 9.0f;
	SkillInfos[3].ManaCost = 300.0f;

	SkillInfos.Emplace(4, FSkillInfo());
	SkillInfos[4].Name = TEXT("");
	SkillInfos[4].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Ice_08");
	SkillInfos[4].CooldownTime = 8.0f;
	SkillInfos[4].ManaCost = 200.0f;

	SkillInfos.Emplace(5, FSkillInfo());
	SkillInfos[5].Name = TEXT("");
	SkillInfos[5].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Ice_06");
	SkillInfos[5].CooldownTime = 16.0f;
	SkillInfos[5].ManaCost = 300.0f;

	SkillInfos.Emplace(6, FSkillInfo());
	SkillInfos[6].Name = TEXT("");
	SkillInfos[6].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Thunder_02");
	SkillInfos[6].CooldownTime = 1.0f;
	SkillInfos[6].ManaCost = 50.0f;

	SkillInfos.Emplace(7, FSkillInfo());
	SkillInfos[7].Name = TEXT("");
	SkillInfos[7].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Thunder_06");
	SkillInfos[7].CooldownTime = 10.0f;
	SkillInfos[7].ManaCost = 200.0f;

	SkillInfos.Emplace(8, FSkillInfo());
	SkillInfos[8].Name = TEXT("");
	SkillInfos[8].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Thunder_03");
	SkillInfos[8].CooldownTime = 8.0f;
	SkillInfos[8].ManaCost = 200.0f;

	SkillInfos.Emplace(9, FSkillInfo());
	SkillInfos[9].Name = TEXT("");
	SkillInfos[9].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Thunder_08");
	SkillInfos[9].CooldownTime = 8.0f;
	SkillInfos[9].ManaCost = 200.0f;

	SkillInfos.Emplace(10, FSkillInfo());
	SkillInfos[10].Name = TEXT("");
	SkillInfos[10].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Thunder_05");
	SkillInfos[10].CooldownTime = 9.0f;
	SkillInfos[10].ManaCost = 200.0f;

	SkillInfos.Emplace(11, FSkillInfo());
	SkillInfos[11].Name = TEXT("");
	SkillInfos[11].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Fire_09");
	SkillInfos[11].CooldownTime = 1.0f;
	SkillInfos[11].ManaCost = 50.0f;

	SkillInfos.Emplace(12, FSkillInfo());
	SkillInfos[12].Name = TEXT("");
	SkillInfos[12].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Fire_01");
	SkillInfos[12].CooldownTime = 3.0f;
	SkillInfos[12].ManaCost = 120.0f;

	SkillInfos.Emplace(13, FSkillInfo());
	SkillInfos[13].Name = TEXT("");
	SkillInfos[13].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Fire_03");
	SkillInfos[13].CooldownTime = 5.0f;
	SkillInfos[13].ManaCost = 250.0f;

	SkillInfos.Emplace(14, FSkillInfo());
	SkillInfos[14].Name = TEXT("");
	SkillInfos[14].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Fire_07");
	SkillInfos[14].CooldownTime = 8.0f;
	SkillInfos[14].ManaCost = 200.0f;

	SkillInfos.Emplace(15, FSkillInfo());
	SkillInfos[15].Name = TEXT("");
	SkillInfos[15].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Fire_05");
	SkillInfos[15].CooldownTime = 12.0f;
	SkillInfos[15].ManaCost = 200.0f;

	SkillInfos.Emplace(16, FSkillInfo());
	SkillInfos[16].Name = TEXT("");
	SkillInfos[16].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Arrow_02");
	SkillInfos[16].CooldownTime = 1.0f;
	SkillInfos[16].ManaCost = 50.0f;

	SkillInfos.Emplace(17, FSkillInfo());
	SkillInfos[17].Name = TEXT("");
	SkillInfos[17].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Arrow_04");
	SkillInfos[17].CooldownTime = 3.0f;
	SkillInfos[17].ManaCost = 120.0f;

	SkillInfos.Emplace(18, FSkillInfo());
	SkillInfos[18].Name = TEXT("");
	SkillInfos[18].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Arrow_01");
	SkillInfos[18].CooldownTime = 5.0f;
	SkillInfos[18].ManaCost = 200.0f;

	SkillInfos.Emplace(19, FSkillInfo());
	SkillInfos[19].Name = TEXT("");
	SkillInfos[19].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Arrow_05");
	SkillInfos[19].CooldownTime = 8.0f;
	SkillInfos[19].ManaCost = 200.0f;

	SkillInfos.Emplace(20, FSkillInfo());
	SkillInfos[20].Name = TEXT("");
	SkillInfos[20].IconPath = TEXT("/Game/0_Main/Basic/Icon/Skill/Arrow_03");
	SkillInfos[20].CooldownTime = 16.0f;
	SkillInfos[20].ManaCost = 300.0f;

	// ==================================================

	FItemInfo ItemInfo;

	ItemInfo.Name = TEXT("Energy Booster");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Energy_Booster");
	ItemInfo.Description = TEXT("HP + 500, Simple but Useful.");
	ItemInfo.Tip = TEXT("");
	ItemInfo.Cost = 200;
	ItemInfos.Emplace(1, ItemInfo);

	ItemInfo.Name = TEXT("Vitality Booster");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Vitality_Booster");
	ItemInfo.Description = TEXT("Double Your HP, Based on Now Value.");
	ItemInfo.Tip = TEXT("");
	ItemInfo.Cost = 300;
	ItemInfos.Emplace(2, ItemInfo);

	ItemInfo.Name = TEXT("Point Booster");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Point_Booster");
	ItemInfo.Description = TEXT("Health Recover Speed * 200%!");
	ItemInfo.Tip = TEXT("Require the Secret Shop");
	ItemInfo.Cost = 500;
	ItemInfos.Emplace(3, ItemInfo);

	ItemInfo.Name = TEXT("Aghanim's Shard");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Aghanim_s_Shard");
	ItemInfo.Description = TEXT("Mana + 500, Powerful Shard.");
	ItemInfo.Tip = TEXT("");
	ItemInfo.Cost = 300;
	ItemInfos.Emplace(4, ItemInfo);

	ItemInfo.Name = TEXT("Aghanim's Scepter");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Aghanim_s_Scepter");
	ItemInfo.Description = TEXT("Double Your Mana, Based on Now Value.");
	ItemInfo.Tip = TEXT("");
	ItemInfo.Cost = 600;
	ItemInfos.Emplace(5, ItemInfo);

	ItemInfo.Name = TEXT("Aeon Disk");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Aeon_Disk");
	ItemInfo.Description = TEXT("Mana Recover Speed * 200%!");
	ItemInfo.Tip = TEXT("Require the Secret Shop");
	ItemInfo.Cost = 1000;
	ItemInfos.Emplace(6, ItemInfo);

	ItemInfo.Name = TEXT("Boots of Travel");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Boots_of_Travel");
	ItemInfo.Description = TEXT("Skill Cooldown Time - 50%!");
	ItemInfo.Tip = TEXT("Require the Secret Shop");
	ItemInfo.Cost = 450;
	ItemInfos.Emplace(7, ItemInfo);

	ItemInfo.Name = TEXT("Divine Rapier");
	ItemInfo.IconPath = TEXT("/Game/0_Main/Basic/Icon/Item/Divine_Rapier");
	ItemInfo.Description = TEXT("Damage * 200%!");
	ItemInfo.Tip = TEXT("Require the Secret Shop");
	ItemInfo.Cost = 800;
	ItemInfos.Emplace(8, ItemInfo);

	// ==================================================

	FHeroInfo HeroInfo;

	HeroInfo.Name = TEXT("Aurora");
	HeroInfo.Skills[1] = 1;
	HeroInfo.Skills[2] = 2;
	HeroInfo.Skills[3] = 3;
	HeroInfo.Skills[4] = 4;
	HeroInfo.Skills[5] = 5;
	HeroInfo.HealthMax = 1200;
	HeroInfo.HealthRecover = 40;
	HeroInfo.ManaMax = 600;
	HeroInfo.ManaRecover = 40;
	HeroInfo.MiniImagePath = TEXT("/Game/0_Main/Basic/Image/Hero/Aurora_mini");
	HeroInfos.Emplace(1, HeroInfo);

	HeroInfo.Name = TEXT("FengMao");
	HeroInfo.Skills[1] = 6;
	HeroInfo.Skills[2] = 7;
	HeroInfo.Skills[3] = 8;
	HeroInfo.Skills[4] = 9;
	HeroInfo.Skills[5] = 10;
	HeroInfo.HealthMax = 1200;
	HeroInfo.HealthRecover = 40;
	HeroInfo.ManaMax = 600;
	HeroInfo.ManaRecover = 40;
	HeroInfo.MiniImagePath = TEXT("/Game/0_Main/Basic/Image/Hero/FengMao_mini");
	HeroInfos.Emplace(2, HeroInfo);

	HeroInfo.Name = TEXT("Grux");
	HeroInfo.Skills[1] = 11;
	HeroInfo.Skills[2] = 12;
	HeroInfo.Skills[3] = 13;
	HeroInfo.Skills[4] = 14;
	HeroInfo.Skills[5] = 15;
	HeroInfo.HealthMax = 1200;
	HeroInfo.HealthRecover = 40;
	HeroInfo.ManaMax = 600;
	HeroInfo.ManaRecover = 40;
	HeroInfo.MiniImagePath = TEXT("/Game/0_Main/Basic/Image/Hero/Grux_mini");
	HeroInfos.Emplace(3, HeroInfo);

	HeroInfo.Name = TEXT("Sparrow");
	HeroInfo.Skills[1] = 16;
	HeroInfo.Skills[2] = 17;
	HeroInfo.Skills[3] = 18;
	HeroInfo.Skills[4] = 19;
	HeroInfo.Skills[5] = 20;
	HeroInfo.HealthMax = 1200;
	HeroInfo.HealthRecover = 40;
	HeroInfo.ManaMax = 600;
	HeroInfo.ManaRecover = 40;
	HeroInfo.MiniImagePath = TEXT("/Game/0_Main/Basic/Image/Hero/Sparrow_mini");
	HeroInfos.Emplace(4, HeroInfo);
}